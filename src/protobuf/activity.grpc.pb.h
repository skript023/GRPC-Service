// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: activity.proto
#ifndef GRPC_activity_2eproto__INCLUDED
#define GRPC_activity_2eproto__INCLUDED

#include "activity.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace activity {

class Activity final {
 public:
  static constexpr char const* service_full_name() {
    return "activity.Activity";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::activity::ActivitiesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>> AsyncFindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>>(AsyncFindAllProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>> PrepareAsyncFindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>>(PrepareAsyncFindAllProductRaw(context, request, cq));
    }
    virtual ::grpc::Status FindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::ActivityReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>> AsyncFindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>>(AsyncFindOneProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>> PrepareAsyncFindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>>(PrepareAsyncFindOneProductRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::activity::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> AsyncCreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::activity::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> AsyncUpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(AsyncUpdateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> PrepareAsyncUpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(PrepareAsyncUpdateProductRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> AsyncRemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(AsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> PrepareAsyncRemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(PrepareAsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>> QueryProduct(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>>(QueryProductRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>> AsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>>(AsyncQueryProductRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>> PrepareAsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>>(PrepareAsyncQueryProductRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::activity::ActivitiesReply>> FindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::activity::ActivitiesReply>>(FindAllProductStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>> AsyncFindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>>(AsyncFindAllProductStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>> PrepareAsyncFindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>>(PrepareAsyncFindAllProductStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::activity::UpdateRequest>> UpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::activity::UpdateRequest>>(UpdateProductStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>> AsyncUpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>>(AsyncUpdateProductStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>> PrepareAsyncUpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>>(PrepareAsyncUpdateProductStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>> CreateProductBidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>>(CreateProductBidiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>> AsyncCreateProductBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>>(AsyncCreateProductBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>> PrepareAsyncCreateProductBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>>(PrepareAsyncCreateProductBidiStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryProduct(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::PaginationRequest,::activity::ActivityReply>* reactor) = 0;
      virtual void FindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::grpc::ClientReadReactor< ::activity::ActivitiesReply>* reactor) = 0;
      virtual void UpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::ClientWriteReactor< ::activity::UpdateRequest>* reactor) = 0;
      virtual void CreateProductBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::CreateRequest,::activity::QueryReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>* AsyncFindAllProductRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>* PrepareAsyncFindAllProductRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>* AsyncFindOneProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>* PrepareAsyncFindOneProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* AsyncRemoveProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* PrepareAsyncRemoveProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>* QueryProductRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>* AsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>* PrepareAsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::activity::ActivitiesReply>* FindAllProductStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>* AsyncFindAllProductStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>* PrepareAsyncFindAllProductStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::activity::UpdateRequest>* UpdateProductStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>* AsyncUpdateProductStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>* PrepareAsyncUpdateProductStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>* CreateProductBidiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>* AsyncCreateProductBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>* PrepareAsyncCreateProductBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::activity::ActivitiesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>> AsyncFindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>>(AsyncFindAllProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>> PrepareAsyncFindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>>(PrepareAsyncFindAllProductRaw(context, request, cq));
    }
    ::grpc::Status FindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::ActivityReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>> AsyncFindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>>(AsyncFindOneProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>> PrepareAsyncFindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>>(PrepareAsyncFindOneProductRaw(context, request, cq));
    }
    ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::activity::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> AsyncCreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    ::grpc::Status UpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::activity::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> AsyncUpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(AsyncUpdateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> PrepareAsyncUpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(PrepareAsyncUpdateProductRaw(context, request, cq));
    }
    ::grpc::Status RemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> AsyncRemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(AsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> PrepareAsyncRemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(PrepareAsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>> QueryProduct(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>>(QueryProductRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>> AsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>>(AsyncQueryProductRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>> PrepareAsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>>(PrepareAsyncQueryProductRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::activity::ActivitiesReply>> FindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::activity::ActivitiesReply>>(FindAllProductStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>> AsyncFindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>>(AsyncFindAllProductStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>> PrepareAsyncFindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>>(PrepareAsyncFindAllProductStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::activity::UpdateRequest>> UpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::activity::UpdateRequest>>(UpdateProductStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>> AsyncUpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>>(AsyncUpdateProductStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>> PrepareAsyncUpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>>(PrepareAsyncUpdateProductStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>> CreateProductBidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>>(CreateProductBidiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>> AsyncCreateProductBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>>(AsyncCreateProductBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>> PrepareAsyncCreateProductBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>>(PrepareAsyncCreateProductBidiStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, std::function<void(::grpc::Status)>) override;
      void FindAllProduct(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, std::function<void(::grpc::Status)>) override;
      void FindOneProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void CreateProduct(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateProduct(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveProduct(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryProduct(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::PaginationRequest,::activity::ActivityReply>* reactor) override;
      void FindAllProductStream(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::grpc::ClientReadReactor< ::activity::ActivitiesReply>* reactor) override;
      void UpdateProductStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::ClientWriteReactor< ::activity::UpdateRequest>* reactor) override;
      void CreateProductBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::CreateRequest,::activity::QueryReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>* AsyncFindAllProductRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>* PrepareAsyncFindAllProductRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>* AsyncFindOneProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>* PrepareAsyncFindOneProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* AsyncRemoveProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* PrepareAsyncRemoveProductRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* QueryProductRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* AsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* PrepareAsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::activity::ActivitiesReply>* FindAllProductStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) override;
    ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>* AsyncFindAllProductStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>* PrepareAsyncFindAllProductStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::activity::UpdateRequest>* UpdateProductStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response) override;
    ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>* AsyncUpdateProductStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>* PrepareAsyncUpdateProductStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* CreateProductBidiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* AsyncCreateProductBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* PrepareAsyncCreateProductBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOneProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllProductStream_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProductStream_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProductBidiStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindAllProduct(::grpc::ServerContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response);
    virtual ::grpc::Status FindOneProduct(::grpc::ServerContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response);
    virtual ::grpc::Status CreateProduct(::grpc::ServerContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response);
    virtual ::grpc::Status UpdateProduct(::grpc::ServerContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response);
    virtual ::grpc::Status RemoveProduct(::grpc::ServerContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response);
    virtual ::grpc::Status QueryProduct(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* stream);
    virtual ::grpc::Status FindAllProductStream(::grpc::ServerContext* context, const ::activity::EmptyRequest* request, ::grpc::ServerWriter< ::activity::ActivitiesReply>* writer);
    virtual ::grpc::Status UpdateProductStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::activity::UpdateRequest>* reader, ::activity::QueryReply* response);
    virtual ::grpc::Status CreateProductBidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProduct(::grpc::ServerContext* context, ::activity::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::ActivitiesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneProduct(::grpc::ServerContext* context, ::activity::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::ActivityReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProduct() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::activity::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProduct(::grpc::ServerContext* context, ::activity::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveProduct(::grpc::ServerContext* context, ::activity::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryProduct() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryProduct(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllProductStream() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FindAllProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProductStream(::grpc::ServerContext* context, ::activity::EmptyRequest* request, ::grpc::ServerAsyncWriter< ::activity::ActivitiesReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateProductStream() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProductStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProductStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::activity::QueryReply, ::activity::UpdateRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProductBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProductBidiStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateProductBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProductBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProductBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAllProduct<WithAsyncMethod_FindOneProduct<WithAsyncMethod_CreateProduct<WithAsyncMethod_UpdateProduct<WithAsyncMethod_RemoveProduct<WithAsyncMethod_QueryProduct<WithAsyncMethod_FindAllProductStream<WithAsyncMethod_UpdateProductStream<WithAsyncMethod_CreateProductBidiStream<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response) { return this->FindAllProduct(context, request, response); }));}
    void SetMessageAllocatorFor_FindAllProduct(
        ::grpc::MessageAllocator< ::activity::EmptyRequest, ::activity::ActivitiesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::EmptyRequest, ::activity::ActivitiesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::ActivityReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response) { return this->FindOneProduct(context, request, response); }));}
    void SetMessageAllocatorFor_FindOneProduct(
        ::grpc::MessageAllocator< ::activity::FindByIdRequest, ::activity::ActivityReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::ActivityReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::CreateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response) { return this->CreateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_CreateProduct(
        ::grpc::MessageAllocator< ::activity::CreateRequest, ::activity::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::CreateRequest, ::activity::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::UpdateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response) { return this->UpdateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateProduct(
        ::grpc::MessageAllocator< ::activity::UpdateRequest, ::activity::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::UpdateRequest, ::activity::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response) { return this->RemoveProduct(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveProduct(
        ::grpc::MessageAllocator< ::activity::FindByIdRequest, ::activity::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryProduct() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::activity::PaginationRequest, ::activity::ActivityReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryProduct(context); }));
    }
    ~WithCallbackMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::activity::PaginationRequest, ::activity::ActivityReply>* QueryProduct(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindAllProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllProductStream() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::EmptyRequest* request) { return this->FindAllProductStream(context, request); }));
    }
    ~WithCallbackMethod_FindAllProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::activity::ActivitiesReply>* FindAllProductStream(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateProductStream() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::activity::UpdateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::activity::QueryReply* response) { return this->UpdateProductStream(context, response); }));
    }
    ~WithCallbackMethod_UpdateProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProductStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::activity::UpdateRequest>* UpdateProductStream(
      ::grpc::CallbackServerContext* /*context*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateProductBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateProductBidiStream() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::activity::CreateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CreateProductBidiStream(context); }));
    }
    ~WithCallbackMethod_CreateProductBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProductBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::activity::CreateRequest, ::activity::QueryReply>* CreateProductBidiStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_FindAllProduct<WithCallbackMethod_FindOneProduct<WithCallbackMethod_CreateProduct<WithCallbackMethod_UpdateProduct<WithCallbackMethod_RemoveProduct<WithCallbackMethod_QueryProduct<WithCallbackMethod_FindAllProductStream<WithCallbackMethod_UpdateProductStream<WithCallbackMethod_CreateProductBidiStream<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProduct() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryProduct() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindAllProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllProductStream() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FindAllProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateProductStream() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProductStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateProductBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProductBidiStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateProductBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProductBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryProduct() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryProduct(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllProductStream() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FindAllProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProductStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateProductStream() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProductStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProductStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProductBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProductBidiStream() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateProductBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProductBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProductBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAllProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindOneProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryProduct() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryProduct(context); }));
    }
    ~WithRawCallbackMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* QueryProduct(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllProductStream() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FindAllProductStream(context, request); }));
    }
    ~WithRawCallbackMethod_FindAllProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindAllProductStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateProductStream() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->UpdateProductStream(context, response); }));
    }
    ~WithRawCallbackMethod_UpdateProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProductStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UpdateProductStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateProductBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateProductBidiStream() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CreateProductBidiStream(context); }));
    }
    ~WithRawCallbackMethod_CreateProductBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProductBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CreateProductBidiStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::EmptyRequest, ::activity::ActivitiesReply>* streamer) {
                       return this->StreamedFindAllProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAllProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::EmptyRequest,::activity::ActivitiesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::FindByIdRequest, ::activity::ActivityReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::FindByIdRequest, ::activity::ActivityReply>* streamer) {
                       return this->StreamedFindOneProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindOneProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::FindByIdRequest,::activity::ActivityReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateProduct() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::CreateRequest, ::activity::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::CreateRequest, ::activity::QueryReply>* streamer) {
                       return this->StreamedCreateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::CreateRequest,::activity::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::UpdateRequest, ::activity::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::UpdateRequest, ::activity::QueryReply>* streamer) {
                       return this->StreamedUpdateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::UpdateRequest,::activity::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::FindByIdRequest, ::activity::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::FindByIdRequest, ::activity::QueryReply>* streamer) {
                       return this->StreamedRemoveProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::FindByIdRequest,::activity::QueryReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAllProduct<WithStreamedUnaryMethod_FindOneProduct<WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_UpdateProduct<WithStreamedUnaryMethod_RemoveProduct<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FindAllProductStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindAllProductStream() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::activity::EmptyRequest, ::activity::ActivitiesReply>* streamer) {
                       return this->StreamedFindAllProductStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindAllProductStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllProductStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindAllProductStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::activity::EmptyRequest,::activity::ActivitiesReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FindAllProductStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAllProduct<WithStreamedUnaryMethod_FindOneProduct<WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_UpdateProduct<WithStreamedUnaryMethod_RemoveProduct<WithSplitStreamingMethod_FindAllProductStream<Service > > > > > > StreamedService;
};

}  // namespace activity


#endif  // GRPC_activity_2eproto__INCLUDED
