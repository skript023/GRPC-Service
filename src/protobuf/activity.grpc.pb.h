// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: activity.proto
#ifndef GRPC_activity_2eproto__INCLUDED
#define GRPC_activity_2eproto__INCLUDED

#include "activity.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace activity {

class Activity final {
 public:
  static constexpr char const* service_full_name() {
    return "activity.Activity";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::activity::ActivitiesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>> AsyncFindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>>(AsyncFindAllActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>> PrepareAsyncFindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>>(PrepareAsyncFindAllActivityRaw(context, request, cq));
    }
    virtual ::grpc::Status FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::ActivityReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>> AsyncFindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>>(AsyncFindOneActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>> PrepareAsyncFindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>>(PrepareAsyncFindOneActivityRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::activity::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> AsyncCreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(AsyncCreateActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> PrepareAsyncCreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(PrepareAsyncCreateActivityRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::activity::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> AsyncUpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(AsyncUpdateActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> PrepareAsyncUpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(PrepareAsyncUpdateActivityRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> AsyncRemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(AsyncRemoveActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>> PrepareAsyncRemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>>(PrepareAsyncRemoveActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>> QueryActivity(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>>(QueryActivityRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>> AsyncQueryActivity(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>>(AsyncQueryActivityRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>> PrepareAsyncQueryActivity(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>>(PrepareAsyncQueryActivityRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::activity::ActivitiesReply>> FindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::activity::ActivitiesReply>>(FindAllActivityStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>> AsyncFindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>>(AsyncFindAllActivityStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>> PrepareAsyncFindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>>(PrepareAsyncFindAllActivityStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::activity::UpdateRequest>> UpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::activity::UpdateRequest>>(UpdateActivityStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>> AsyncUpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>>(AsyncUpdateActivityStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>> PrepareAsyncUpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>>(PrepareAsyncUpdateActivityStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>> CreateActivityBidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>>(CreateActivityBidiStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>> AsyncCreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>>(AsyncCreateActivityBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>> PrepareAsyncCreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>>(PrepareAsyncCreateActivityBidiStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryActivity(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::PaginationRequest,::activity::ActivityReply>* reactor) = 0;
      virtual void FindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::grpc::ClientReadReactor< ::activity::ActivitiesReply>* reactor) = 0;
      virtual void UpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::ClientWriteReactor< ::activity::UpdateRequest>* reactor) = 0;
      virtual void CreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::CreateRequest,::activity::QueryReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>* AsyncFindAllActivityRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivitiesReply>* PrepareAsyncFindAllActivityRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>* AsyncFindOneActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::ActivityReply>* PrepareAsyncFindOneActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* AsyncCreateActivityRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* PrepareAsyncCreateActivityRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* AsyncUpdateActivityRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* PrepareAsyncUpdateActivityRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* AsyncRemoveActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::activity::QueryReply>* PrepareAsyncRemoveActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>* QueryActivityRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>* AsyncQueryActivityRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::PaginationRequest, ::activity::ActivityReply>* PrepareAsyncQueryActivityRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::activity::ActivitiesReply>* FindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>* AsyncFindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::activity::ActivitiesReply>* PrepareAsyncFindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::activity::UpdateRequest>* UpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>* AsyncUpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::activity::UpdateRequest>* PrepareAsyncUpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>* CreateActivityBidiStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>* AsyncCreateActivityBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::activity::CreateRequest, ::activity::QueryReply>* PrepareAsyncCreateActivityBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::activity::ActivitiesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>> AsyncFindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>>(AsyncFindAllActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>> PrepareAsyncFindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>>(PrepareAsyncFindAllActivityRaw(context, request, cq));
    }
    ::grpc::Status FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::ActivityReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>> AsyncFindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>>(AsyncFindOneActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>> PrepareAsyncFindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>>(PrepareAsyncFindOneActivityRaw(context, request, cq));
    }
    ::grpc::Status CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::activity::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> AsyncCreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(AsyncCreateActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> PrepareAsyncCreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(PrepareAsyncCreateActivityRaw(context, request, cq));
    }
    ::grpc::Status UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::activity::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> AsyncUpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(AsyncUpdateActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> PrepareAsyncUpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(PrepareAsyncUpdateActivityRaw(context, request, cq));
    }
    ::grpc::Status RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> AsyncRemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(AsyncRemoveActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>> PrepareAsyncRemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>>(PrepareAsyncRemoveActivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>> QueryActivity(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>>(QueryActivityRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>> AsyncQueryActivity(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>>(AsyncQueryActivityRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>> PrepareAsyncQueryActivity(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>>(PrepareAsyncQueryActivityRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::activity::ActivitiesReply>> FindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::activity::ActivitiesReply>>(FindAllActivityStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>> AsyncFindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>>(AsyncFindAllActivityStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>> PrepareAsyncFindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>>(PrepareAsyncFindAllActivityStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::activity::UpdateRequest>> UpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::activity::UpdateRequest>>(UpdateActivityStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>> AsyncUpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>>(AsyncUpdateActivityStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>> PrepareAsyncUpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>>(PrepareAsyncUpdateActivityStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>> CreateActivityBidiStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>>(CreateActivityBidiStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>> AsyncCreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>>(AsyncCreateActivityBidiStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>> PrepareAsyncCreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>>(PrepareAsyncCreateActivityBidiStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, std::function<void(::grpc::Status)>) override;
      void FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, std::function<void(::grpc::Status)>) override;
      void FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryActivity(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::PaginationRequest,::activity::ActivityReply>* reactor) override;
      void FindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::grpc::ClientReadReactor< ::activity::ActivitiesReply>* reactor) override;
      void UpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::ClientWriteReactor< ::activity::UpdateRequest>* reactor) override;
      void CreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::CreateRequest,::activity::QueryReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>* AsyncFindAllActivityRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>* PrepareAsyncFindAllActivityRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>* AsyncFindOneActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>* PrepareAsyncFindOneActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* AsyncCreateActivityRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* PrepareAsyncCreateActivityRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* AsyncUpdateActivityRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* PrepareAsyncUpdateActivityRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* AsyncRemoveActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* PrepareAsyncRemoveActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* QueryActivityRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* AsyncQueryActivityRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* PrepareAsyncQueryActivityRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::activity::ActivitiesReply>* FindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) override;
    ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>* AsyncFindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::activity::ActivitiesReply>* PrepareAsyncFindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::activity::UpdateRequest>* UpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response) override;
    ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>* AsyncUpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::activity::UpdateRequest>* PrepareAsyncUpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* CreateActivityBidiStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* AsyncCreateActivityBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* PrepareAsyncCreateActivityBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllActivity_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOneActivity_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateActivity_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateActivity_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveActivity_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryActivity_;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllActivityStream_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateActivityStream_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateActivityBidiStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindAllActivity(::grpc::ServerContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response);
    virtual ::grpc::Status FindOneActivity(::grpc::ServerContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response);
    virtual ::grpc::Status CreateActivity(::grpc::ServerContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response);
    virtual ::grpc::Status UpdateActivity(::grpc::ServerContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response);
    virtual ::grpc::Status RemoveActivity(::grpc::ServerContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response);
    virtual ::grpc::Status QueryActivity(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* stream);
    virtual ::grpc::Status FindAllActivityStream(::grpc::ServerContext* context, const ::activity::EmptyRequest* request, ::grpc::ServerWriter< ::activity::ActivitiesReply>* writer);
    virtual ::grpc::Status UpdateActivityStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::activity::UpdateRequest>* reader, ::activity::QueryReply* response);
    virtual ::grpc::Status CreateActivityBidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllActivity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAllActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivity(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllActivity(::grpc::ServerContext* context, ::activity::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::ActivitiesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOneActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOneActivity() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindOneActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneActivity(::grpc::ServerContext* context, ::activity::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::ActivityReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateActivity() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivity(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateActivity(::grpc::ServerContext* context, ::activity::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateActivity() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivity(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateActivity(::grpc::ServerContext* context, ::activity::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveActivity() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveActivity(::grpc::ServerContext* context, ::activity::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::activity::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryActivity() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_QueryActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryActivity(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryActivity(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllActivityStream() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FindAllActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivityStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllActivityStream(::grpc::ServerContext* context, ::activity::EmptyRequest* request, ::grpc::ServerAsyncWriter< ::activity::ActivitiesReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateActivityStream() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivityStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateActivityStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::activity::QueryReply, ::activity::UpdateRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateActivityBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateActivityBidiStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateActivityBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivityBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateActivityBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAllActivity<WithAsyncMethod_FindOneActivity<WithAsyncMethod_CreateActivity<WithAsyncMethod_UpdateActivity<WithAsyncMethod_RemoveActivity<WithAsyncMethod_QueryActivity<WithAsyncMethod_FindAllActivityStream<WithAsyncMethod_UpdateActivityStream<WithAsyncMethod_CreateActivityBidiStream<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindAllActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllActivity() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response) { return this->FindAllActivity(context, request, response); }));}
    void SetMessageAllocatorFor_FindAllActivity(
        ::grpc::MessageAllocator< ::activity::EmptyRequest, ::activity::ActivitiesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::EmptyRequest, ::activity::ActivitiesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAllActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivity(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindOneActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindOneActivity() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::ActivityReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response) { return this->FindOneActivity(context, request, response); }));}
    void SetMessageAllocatorFor_FindOneActivity(
        ::grpc::MessageAllocator< ::activity::FindByIdRequest, ::activity::ActivityReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::ActivityReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindOneActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateActivity() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::CreateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response) { return this->CreateActivity(context, request, response); }));}
    void SetMessageAllocatorFor_CreateActivity(
        ::grpc::MessageAllocator< ::activity::CreateRequest, ::activity::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::CreateRequest, ::activity::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivity(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateActivity() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::UpdateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response) { return this->UpdateActivity(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateActivity(
        ::grpc::MessageAllocator< ::activity::UpdateRequest, ::activity::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::UpdateRequest, ::activity::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivity(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveActivity() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response) { return this->RemoveActivity(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveActivity(
        ::grpc::MessageAllocator< ::activity::FindByIdRequest, ::activity::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::activity::FindByIdRequest, ::activity::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryActivity() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::activity::PaginationRequest, ::activity::ActivityReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryActivity(context); }));
    }
    ~WithCallbackMethod_QueryActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryActivity(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::activity::PaginationRequest, ::activity::ActivityReply>* QueryActivity(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindAllActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllActivityStream() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::activity::EmptyRequest* request) { return this->FindAllActivityStream(context, request); }));
    }
    ~WithCallbackMethod_FindAllActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivityStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::activity::ActivitiesReply>* FindAllActivityStream(
      ::grpc::CallbackServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateActivityStream() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::activity::UpdateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::activity::QueryReply* response) { return this->UpdateActivityStream(context, response); }));
    }
    ~WithCallbackMethod_UpdateActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivityStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::activity::UpdateRequest>* UpdateActivityStream(
      ::grpc::CallbackServerContext* /*context*/, ::activity::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateActivityBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateActivityBidiStream() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::activity::CreateRequest, ::activity::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CreateActivityBidiStream(context); }));
    }
    ~WithCallbackMethod_CreateActivityBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivityBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::activity::CreateRequest, ::activity::QueryReply>* CreateActivityBidiStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_FindAllActivity<WithCallbackMethod_FindOneActivity<WithCallbackMethod_CreateActivity<WithCallbackMethod_UpdateActivity<WithCallbackMethod_RemoveActivity<WithCallbackMethod_QueryActivity<WithCallbackMethod_FindAllActivityStream<WithCallbackMethod_UpdateActivityStream<WithCallbackMethod_CreateActivityBidiStream<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindAllActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllActivity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAllActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivity(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOneActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOneActivity() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindOneActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateActivity() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivity(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateActivity() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivity(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveActivity() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryActivity() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_QueryActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryActivity(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindAllActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllActivityStream() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FindAllActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivityStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateActivityStream() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivityStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateActivityBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateActivityBidiStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateActivityBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivityBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllActivity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindAllActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivity(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllActivity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOneActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOneActivity() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindOneActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneActivity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateActivity() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivity(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateActivity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateActivity() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivity(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateActivity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveActivity() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveActivity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryActivity() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_QueryActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryActivity(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryActivity(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllActivityStream() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FindAllActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivityStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllActivityStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateActivityStream() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivityStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateActivityStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateActivityBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateActivityBidiStream() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateActivityBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivityBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateActivityBidiStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllActivity() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAllActivity(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAllActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivity(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindOneActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindOneActivity() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindOneActivity(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindOneActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateActivity() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateActivity(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivity(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateActivity() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateActivity(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivity(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveActivity() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveActivity(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveActivity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryActivity() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryActivity(context); }));
    }
    ~WithRawCallbackMethod_QueryActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryActivity(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* QueryActivity(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllActivityStream() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FindAllActivityStream(context, request); }));
    }
    ~WithRawCallbackMethod_FindAllActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllActivityStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindAllActivityStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateActivityStream() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->UpdateActivityStream(context, response); }));
    }
    ~WithRawCallbackMethod_UpdateActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateActivityStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::activity::UpdateRequest>* /*reader*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UpdateActivityStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateActivityBidiStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateActivityBidiStream() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->CreateActivityBidiStream(context); }));
    }
    ~WithRawCallbackMethod_CreateActivityBidiStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateActivityBidiStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* CreateActivityBidiStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAllActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAllActivity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::EmptyRequest, ::activity::ActivitiesReply>* streamer) {
                       return this->StreamedFindAllActivity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAllActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllActivity(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::activity::ActivitiesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAllActivity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::EmptyRequest,::activity::ActivitiesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindOneActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindOneActivity() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::FindByIdRequest, ::activity::ActivityReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::FindByIdRequest, ::activity::ActivityReply>* streamer) {
                       return this->StreamedFindOneActivity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindOneActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindOneActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::ActivityReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindOneActivity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::FindByIdRequest,::activity::ActivityReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateActivity() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::CreateRequest, ::activity::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::CreateRequest, ::activity::QueryReply>* streamer) {
                       return this->StreamedCreateActivity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateActivity(::grpc::ServerContext* /*context*/, const ::activity::CreateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateActivity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::CreateRequest,::activity::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateActivity() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::UpdateRequest, ::activity::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::UpdateRequest, ::activity::QueryReply>* streamer) {
                       return this->StreamedUpdateActivity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateActivity(::grpc::ServerContext* /*context*/, const ::activity::UpdateRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateActivity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::UpdateRequest,::activity::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveActivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveActivity() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::activity::FindByIdRequest, ::activity::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::activity::FindByIdRequest, ::activity::QueryReply>* streamer) {
                       return this->StreamedRemoveActivity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveActivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveActivity(::grpc::ServerContext* /*context*/, const ::activity::FindByIdRequest* /*request*/, ::activity::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveActivity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::activity::FindByIdRequest,::activity::QueryReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAllActivity<WithStreamedUnaryMethod_FindOneActivity<WithStreamedUnaryMethod_CreateActivity<WithStreamedUnaryMethod_UpdateActivity<WithStreamedUnaryMethod_RemoveActivity<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FindAllActivityStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindAllActivityStream() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::activity::EmptyRequest, ::activity::ActivitiesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::activity::EmptyRequest, ::activity::ActivitiesReply>* streamer) {
                       return this->StreamedFindAllActivityStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindAllActivityStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllActivityStream(::grpc::ServerContext* /*context*/, const ::activity::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::activity::ActivitiesReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindAllActivityStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::activity::EmptyRequest,::activity::ActivitiesReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FindAllActivityStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAllActivity<WithStreamedUnaryMethod_FindOneActivity<WithStreamedUnaryMethod_CreateActivity<WithStreamedUnaryMethod_UpdateActivity<WithStreamedUnaryMethod_RemoveActivity<WithSplitStreamingMethod_FindAllActivityStream<Service > > > > > > StreamedService;
};

}  // namespace activity


#endif  // GRPC_activity_2eproto__INCLUDED
