// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto
#ifndef GRPC_user_2eproto__INCLUDED
#define GRPC_user_2eproto__INCLUDED

#include "user.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace user {

class User final {
 public:
  static constexpr char const* service_full_name() {
    return "user.User";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::user::UsersReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UsersReply>> AsyncFindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UsersReply>>(AsyncFindAllUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UsersReply>> PrepareAsyncFindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UsersReply>>(PrepareAsyncFindAllUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::user::UsersReply>> FindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::user::UsersReply>>(FindAllUserServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::user::UsersReply>> AsyncFindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::user::UsersReply>>(AsyncFindAllUserServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::user::UsersReply>> PrepareAsyncFindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::user::UsersReply>>(PrepareAsyncFindAllUserServerStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::user::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserReply>> AsyncFindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserReply>>(AsyncFindOneUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserReply>> PrepareAsyncFindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::UserReply>>(PrepareAsyncFindOneUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>> FindOneUserBidistream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>>(FindOneUserBidistreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>> AsyncFindOneUserBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>>(AsyncFindOneUserBidistreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>> PrepareAsyncFindOneUserBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>>(PrepareAsyncFindOneUserBidistreamRaw(context, cq));
    }
    virtual ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::user::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>> AsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>>(AsyncCreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>> PrepareAsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>>(PrepareAsyncCreateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::user::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>> AsyncUpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::user::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>> AsyncRemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>>(AsyncRemoveUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>> PrepareAsyncRemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>>(PrepareAsyncRemoveUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>> QueryUser(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>>(QueryUserRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>> AsyncQueryUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>>(AsyncQueryUserRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>> PrepareAsyncQueryUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>>(PrepareAsyncQueryUserRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::grpc::ClientReadReactor< ::user::UsersReply>* reactor) = 0;
      virtual void FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindOneUserBidistream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::user::FindByIdRequest,::user::UserReply>* reactor) = 0;
      virtual void CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryUser(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::user::PaginationRequest,::user::UserReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UsersReply>* AsyncFindAllUserRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UsersReply>* PrepareAsyncFindAllUserRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::user::UsersReply>* FindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::user::UsersReply>* AsyncFindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::user::UsersReply>* PrepareAsyncFindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UserReply>* AsyncFindOneUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::UserReply>* PrepareAsyncFindOneUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>* FindOneUserBidistreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>* AsyncFindOneUserBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::user::FindByIdRequest, ::user::UserReply>* PrepareAsyncFindOneUserBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>* PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>* AsyncRemoveUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::user::QueryReply>* PrepareAsyncRemoveUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>* QueryUserRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>* AsyncQueryUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::user::PaginationRequest, ::user::UserReply>* PrepareAsyncQueryUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::user::UsersReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UsersReply>> AsyncFindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UsersReply>>(AsyncFindAllUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UsersReply>> PrepareAsyncFindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UsersReply>>(PrepareAsyncFindAllUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::user::UsersReply>> FindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::user::UsersReply>>(FindAllUserServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::user::UsersReply>> AsyncFindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::user::UsersReply>>(AsyncFindAllUserServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::user::UsersReply>> PrepareAsyncFindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::user::UsersReply>>(PrepareAsyncFindAllUserServerStreamRaw(context, request, cq));
    }
    ::grpc::Status FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::user::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserReply>> AsyncFindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserReply>>(AsyncFindOneUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserReply>> PrepareAsyncFindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::UserReply>>(PrepareAsyncFindOneUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::user::FindByIdRequest, ::user::UserReply>> FindOneUserBidistream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::user::FindByIdRequest, ::user::UserReply>>(FindOneUserBidistreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>> AsyncFindOneUserBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>>(AsyncFindOneUserBidistreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>> PrepareAsyncFindOneUserBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>>(PrepareAsyncFindOneUserBidistreamRaw(context, cq));
    }
    ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::user::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>> AsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>>(AsyncCreateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>> PrepareAsyncCreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>>(PrepareAsyncCreateUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::user::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>> AsyncUpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    ::grpc::Status RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::user::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>> AsyncRemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>>(AsyncRemoveUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>> PrepareAsyncRemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::user::QueryReply>>(PrepareAsyncRemoveUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::user::PaginationRequest, ::user::UserReply>> QueryUser(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::user::PaginationRequest, ::user::UserReply>>(QueryUserRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>> AsyncQueryUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>>(AsyncQueryUserRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>> PrepareAsyncQueryUser(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>>(PrepareAsyncQueryUserRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response, std::function<void(::grpc::Status)>) override;
      void FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::grpc::ClientReadReactor< ::user::UsersReply>* reactor) override;
      void FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response, std::function<void(::grpc::Status)>) override;
      void FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindOneUserBidistream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::user::FindByIdRequest,::user::UserReply>* reactor) override;
      void CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryUser(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::user::PaginationRequest,::user::UserReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::user::UsersReply>* AsyncFindAllUserRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UsersReply>* PrepareAsyncFindAllUserRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::user::UsersReply>* FindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request) override;
    ::grpc::ClientAsyncReader< ::user::UsersReply>* AsyncFindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::user::UsersReply>* PrepareAsyncFindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UserReply>* AsyncFindOneUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::UserReply>* PrepareAsyncFindOneUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::user::FindByIdRequest, ::user::UserReply>* FindOneUserBidistreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>* AsyncFindOneUserBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>* PrepareAsyncFindOneUserBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::QueryReply>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::QueryReply>* PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::QueryReply>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::QueryReply>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::QueryReply>* AsyncRemoveUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::user::QueryReply>* PrepareAsyncRemoveUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::user::PaginationRequest, ::user::UserReply>* QueryUserRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>* AsyncQueryUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>* PrepareAsyncQueryUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllUser_;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllUserServerStream_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOneUser_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOneUserBidistream_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveUser_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindAllUser(::grpc::ServerContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response);
    virtual ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* context, const ::user::EmptyRequest* request, ::grpc::ServerWriter< ::user::UsersReply>* writer);
    virtual ::grpc::Status FindOneUser(::grpc::ServerContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response);
    virtual ::grpc::Status FindOneUserBidistream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* stream);
    virtual ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response);
    virtual ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response);
    virtual ::grpc::Status RemoveUser(::grpc::ServerContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response);
    virtual ::grpc::Status QueryUser(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAllUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUser(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllUser(::grpc::ServerContext* context, ::user::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::UsersReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllUserServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllUserServerStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindAllUserServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::user::UsersReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllUserServerStream(::grpc::ServerContext* context, ::user::EmptyRequest* request, ::grpc::ServerAsyncWriter< ::user::UsersReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOneUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOneUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindOneUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneUser(::grpc::ServerContext* context, ::user::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOneUserBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOneUserBidistream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FindOneUserBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUserBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneUserBidistream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateUser() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::user::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUser() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::user::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveUser() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveUser(::grpc::ServerContext* context, ::user::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::user::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryUser() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_QueryUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryUser(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::user::UserReply, ::user::PaginationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAllUser<WithAsyncMethod_FindAllUserServerStream<WithAsyncMethod_FindOneUser<WithAsyncMethod_FindOneUserBidistream<WithAsyncMethod_CreateUser<WithAsyncMethod_UpdateUser<WithAsyncMethod_RemoveUser<WithAsyncMethod_QueryUser<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindAllUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::user::EmptyRequest, ::user::UsersReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response) { return this->FindAllUser(context, request, response); }));}
    void SetMessageAllocatorFor_FindAllUser(
        ::grpc::MessageAllocator< ::user::EmptyRequest, ::user::UsersReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::EmptyRequest, ::user::UsersReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAllUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUser(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindAllUserServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllUserServerStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::user::EmptyRequest, ::user::UsersReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::EmptyRequest* request) { return this->FindAllUserServerStream(context, request); }));
    }
    ~WithCallbackMethod_FindAllUserServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::user::UsersReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::user::UsersReply>* FindAllUserServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::user::EmptyRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindOneUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindOneUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::user::FindByIdRequest, ::user::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response) { return this->FindOneUser(context, request, response); }));}
    void SetMessageAllocatorFor_FindOneUser(
        ::grpc::MessageAllocator< ::user::FindByIdRequest, ::user::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::FindByIdRequest, ::user::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindOneUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindOneUserBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindOneUserBidistream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::user::FindByIdRequest, ::user::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FindOneUserBidistream(context); }));
    }
    ~WithCallbackMethod_FindOneUserBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUserBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::user::FindByIdRequest, ::user::UserReply>* FindOneUserBidistream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateUser() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::user::CreateRequest, ::user::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response) { return this->CreateUser(context, request, response); }));}
    void SetMessageAllocatorFor_CreateUser(
        ::grpc::MessageAllocator< ::user::CreateRequest, ::user::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::CreateRequest, ::user::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::user::UpdateRequest, ::user::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response) { return this->UpdateUser(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUser(
        ::grpc::MessageAllocator< ::user::UpdateRequest, ::user::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::UpdateRequest, ::user::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveUser() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::user::FindByIdRequest, ::user::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response) { return this->RemoveUser(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveUser(
        ::grpc::MessageAllocator< ::user::FindByIdRequest, ::user::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::user::FindByIdRequest, ::user::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveUser(
      ::grpc::CallbackServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryUser() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::user::PaginationRequest, ::user::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryUser(context); }));
    }
    ~WithCallbackMethod_QueryUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::user::PaginationRequest, ::user::UserReply>* QueryUser(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_FindAllUser<WithCallbackMethod_FindAllUserServerStream<WithCallbackMethod_FindOneUser<WithCallbackMethod_FindOneUserBidistream<WithCallbackMethod_CreateUser<WithCallbackMethod_UpdateUser<WithCallbackMethod_RemoveUser<WithCallbackMethod_QueryUser<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindAllUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAllUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUser(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindAllUserServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllUserServerStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindAllUserServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::user::UsersReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOneUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOneUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindOneUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOneUserBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOneUserBidistream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FindOneUserBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUserBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateUser() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUser() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveUser() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryUser() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_QueryUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindAllUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUser(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllUserServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllUserServerStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindAllUserServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::user::UsersReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllUserServerStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOneUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOneUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindOneUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOneUserBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOneUserBidistream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FindOneUserBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUserBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneUserBidistream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateUser() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveUser() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemoveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryUser() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_QueryUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryUser(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAllUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAllUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUser(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllUserServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllUserServerStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FindAllUserServerStream(context, request); }));
    }
    ~WithRawCallbackMethod_FindAllUserServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::user::UsersReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindAllUserServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindOneUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindOneUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindOneUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindOneUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindOneUserBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindOneUserBidistream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FindOneUserBidistream(context); }));
    }
    ~WithRawCallbackMethod_FindOneUserBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneUserBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FindOneUserBidistream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateUser() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveUser() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryUser() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryUser(context); }));
    }
    ~WithRawCallbackMethod_QueryUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryUser(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* QueryUser(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAllUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAllUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::EmptyRequest, ::user::UsersReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::EmptyRequest, ::user::UsersReply>* streamer) {
                       return this->StreamedFindAllUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAllUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllUser(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::user::UsersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAllUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::EmptyRequest,::user::UsersReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindOneUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindOneUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::FindByIdRequest, ::user::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::FindByIdRequest, ::user::UserReply>* streamer) {
                       return this->StreamedFindOneUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindOneUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindOneUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindOneUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::FindByIdRequest,::user::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateUser() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::CreateRequest, ::user::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::CreateRequest, ::user::QueryReply>* streamer) {
                       return this->StreamedCreateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* /*context*/, const ::user::CreateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::CreateRequest,::user::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUser() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::UpdateRequest, ::user::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::UpdateRequest, ::user::QueryReply>* streamer) {
                       return this->StreamedUpdateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::user::UpdateRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::UpdateRequest,::user::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveUser() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::user::FindByIdRequest, ::user::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::user::FindByIdRequest, ::user::QueryReply>* streamer) {
                       return this->StreamedRemoveUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveUser(::grpc::ServerContext* /*context*/, const ::user::FindByIdRequest* /*request*/, ::user::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::user::FindByIdRequest,::user::QueryReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAllUser<WithStreamedUnaryMethod_FindOneUser<WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_RemoveUser<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FindAllUserServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindAllUserServerStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::user::EmptyRequest, ::user::UsersReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::user::EmptyRequest, ::user::UsersReply>* streamer) {
                       return this->StreamedFindAllUserServerStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindAllUserServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllUserServerStream(::grpc::ServerContext* /*context*/, const ::user::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::user::UsersReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindAllUserServerStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::user::EmptyRequest,::user::UsersReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FindAllUserServerStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAllUser<WithSplitStreamingMethod_FindAllUserServerStream<WithStreamedUnaryMethod_FindOneUser<WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_RemoveUser<Service > > > > > > StreamedService;
};

}  // namespace user


#endif  // GRPC_user_2eproto__INCLUDED
