// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: activity.proto

#include "activity.pb.h"
#include "activity.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace activity {

static const char* Activity_method_names[] = {
  "/activity.Activity/FindAllActivity",
  "/activity.Activity/FindOneActivity",
  "/activity.Activity/CreateActivity",
  "/activity.Activity/UpdateActivity",
  "/activity.Activity/RemoveActivity",
  "/activity.Activity/QueryActivity",
  "/activity.Activity/FindAllActivityStream",
  "/activity.Activity/UpdateActivityStream",
  "/activity.Activity/CreateActivityBidiStream",
};

std::unique_ptr< Activity::Stub> Activity::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Activity::Stub> stub(new Activity::Stub(channel, options));
  return stub;
}

Activity::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FindAllActivity_(Activity_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindOneActivity_(Activity_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateActivity_(Activity_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateActivity_(Activity_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveActivity_(Activity_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryActivity_(Activity_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_FindAllActivityStream_(Activity_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UpdateActivityStream_(Activity_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_CreateActivityBidiStream_(Activity_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Activity::Stub::FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::activity::ActivitiesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::activity::EmptyRequest, ::activity::ActivitiesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindAllActivity_, context, request, response);
}

void Activity::Stub::async::FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::activity::EmptyRequest, ::activity::ActivitiesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAllActivity_, context, request, response, std::move(f));
}

void Activity::Stub::async::FindAllActivity(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAllActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>* Activity::Stub::PrepareAsyncFindAllActivityRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::activity::ActivitiesReply, ::activity::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindAllActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::activity::ActivitiesReply>* Activity::Stub::AsyncFindAllActivityRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindAllActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Activity::Stub::FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::ActivityReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::activity::FindByIdRequest, ::activity::ActivityReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindOneActivity_, context, request, response);
}

void Activity::Stub::async::FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::activity::FindByIdRequest, ::activity::ActivityReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOneActivity_, context, request, response, std::move(f));
}

void Activity::Stub::async::FindOneActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOneActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>* Activity::Stub::PrepareAsyncFindOneActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::activity::ActivityReply, ::activity::FindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindOneActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::activity::ActivityReply>* Activity::Stub::AsyncFindOneActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindOneActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Activity::Stub::CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::activity::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::activity::CreateRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateActivity_, context, request, response);
}

void Activity::Stub::async::CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::activity::CreateRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateActivity_, context, request, response, std::move(f));
}

void Activity::Stub::async::CreateActivity(::grpc::ClientContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* Activity::Stub::PrepareAsyncCreateActivityRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::activity::QueryReply, ::activity::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* Activity::Stub::AsyncCreateActivityRaw(::grpc::ClientContext* context, const ::activity::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Activity::Stub::UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::activity::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::activity::UpdateRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateActivity_, context, request, response);
}

void Activity::Stub::async::UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::activity::UpdateRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateActivity_, context, request, response, std::move(f));
}

void Activity::Stub::async::UpdateActivity(::grpc::ClientContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* Activity::Stub::PrepareAsyncUpdateActivityRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::activity::QueryReply, ::activity::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* Activity::Stub::AsyncUpdateActivityRaw(::grpc::ClientContext* context, const ::activity::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Activity::Stub::RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::activity::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::activity::FindByIdRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveActivity_, context, request, response);
}

void Activity::Stub::async::RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::activity::FindByIdRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveActivity_, context, request, response, std::move(f));
}

void Activity::Stub::async::RemoveActivity(::grpc::ClientContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* Activity::Stub::PrepareAsyncRemoveActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::activity::QueryReply, ::activity::FindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::activity::QueryReply>* Activity::Stub::AsyncRemoveActivityRaw(::grpc::ClientContext* context, const ::activity::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* Activity::Stub::QueryActivityRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::activity::PaginationRequest, ::activity::ActivityReply>::Create(channel_.get(), rpcmethod_QueryActivity_, context);
}

void Activity::Stub::async::QueryActivity(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::PaginationRequest,::activity::ActivityReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::activity::PaginationRequest,::activity::ActivityReply>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryActivity_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* Activity::Stub::AsyncQueryActivityRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::activity::PaginationRequest, ::activity::ActivityReply>::Create(channel_.get(), cq, rpcmethod_QueryActivity_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::activity::PaginationRequest, ::activity::ActivityReply>* Activity::Stub::PrepareAsyncQueryActivityRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::activity::PaginationRequest, ::activity::ActivityReply>::Create(channel_.get(), cq, rpcmethod_QueryActivity_, context, false, nullptr);
}

::grpc::ClientReader< ::activity::ActivitiesReply>* Activity::Stub::FindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::activity::ActivitiesReply>::Create(channel_.get(), rpcmethod_FindAllActivityStream_, context, request);
}

void Activity::Stub::async::FindAllActivityStream(::grpc::ClientContext* context, const ::activity::EmptyRequest* request, ::grpc::ClientReadReactor< ::activity::ActivitiesReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::activity::ActivitiesReply>::Create(stub_->channel_.get(), stub_->rpcmethod_FindAllActivityStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::activity::ActivitiesReply>* Activity::Stub::AsyncFindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::activity::ActivitiesReply>::Create(channel_.get(), cq, rpcmethod_FindAllActivityStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::activity::ActivitiesReply>* Activity::Stub::PrepareAsyncFindAllActivityStreamRaw(::grpc::ClientContext* context, const ::activity::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::activity::ActivitiesReply>::Create(channel_.get(), cq, rpcmethod_FindAllActivityStream_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::activity::UpdateRequest>* Activity::Stub::UpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::activity::UpdateRequest>::Create(channel_.get(), rpcmethod_UpdateActivityStream_, context, response);
}

void Activity::Stub::async::UpdateActivityStream(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::ClientWriteReactor< ::activity::UpdateRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::activity::UpdateRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateActivityStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::activity::UpdateRequest>* Activity::Stub::AsyncUpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::activity::UpdateRequest>::Create(channel_.get(), cq, rpcmethod_UpdateActivityStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::activity::UpdateRequest>* Activity::Stub::PrepareAsyncUpdateActivityStreamRaw(::grpc::ClientContext* context, ::activity::QueryReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::activity::UpdateRequest>::Create(channel_.get(), cq, rpcmethod_UpdateActivityStream_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* Activity::Stub::CreateActivityBidiStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::activity::CreateRequest, ::activity::QueryReply>::Create(channel_.get(), rpcmethod_CreateActivityBidiStream_, context);
}

void Activity::Stub::async::CreateActivityBidiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::activity::CreateRequest,::activity::QueryReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::activity::CreateRequest,::activity::QueryReply>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateActivityBidiStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* Activity::Stub::AsyncCreateActivityBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::activity::CreateRequest, ::activity::QueryReply>::Create(channel_.get(), cq, rpcmethod_CreateActivityBidiStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::activity::CreateRequest, ::activity::QueryReply>* Activity::Stub::PrepareAsyncCreateActivityBidiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::activity::CreateRequest, ::activity::QueryReply>::Create(channel_.get(), cq, rpcmethod_CreateActivityBidiStream_, context, false, nullptr);
}

Activity::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Activity::Service, ::activity::EmptyRequest, ::activity::ActivitiesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::activity::EmptyRequest* req,
             ::activity::ActivitiesReply* resp) {
               return service->FindAllActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Activity::Service, ::activity::FindByIdRequest, ::activity::ActivityReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::activity::FindByIdRequest* req,
             ::activity::ActivityReply* resp) {
               return service->FindOneActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Activity::Service, ::activity::CreateRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::activity::CreateRequest* req,
             ::activity::QueryReply* resp) {
               return service->CreateActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Activity::Service, ::activity::UpdateRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::activity::UpdateRequest* req,
             ::activity::QueryReply* resp) {
               return service->UpdateActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Activity::Service, ::activity::FindByIdRequest, ::activity::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::activity::FindByIdRequest* req,
             ::activity::QueryReply* resp) {
               return service->RemoveActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Activity::Service, ::activity::PaginationRequest, ::activity::ActivityReply>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::activity::ActivityReply,
             ::activity::PaginationRequest>* stream) {
               return service->QueryActivity(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Activity::Service, ::activity::EmptyRequest, ::activity::ActivitiesReply>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             const ::activity::EmptyRequest* req,
             ::grpc::ServerWriter<::activity::ActivitiesReply>* writer) {
               return service->FindAllActivityStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[7],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Activity::Service, ::activity::UpdateRequest, ::activity::QueryReply>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::activity::UpdateRequest>* reader,
             ::activity::QueryReply* resp) {
               return service->UpdateActivityStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Activity_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Activity::Service, ::activity::CreateRequest, ::activity::QueryReply>(
          [](Activity::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::activity::QueryReply,
             ::activity::CreateRequest>* stream) {
               return service->CreateActivityBidiStream(ctx, stream);
             }, this)));
}

Activity::Service::~Service() {
}

::grpc::Status Activity::Service::FindAllActivity(::grpc::ServerContext* context, const ::activity::EmptyRequest* request, ::activity::ActivitiesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::FindOneActivity(::grpc::ServerContext* context, const ::activity::FindByIdRequest* request, ::activity::ActivityReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::CreateActivity(::grpc::ServerContext* context, const ::activity::CreateRequest* request, ::activity::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::UpdateActivity(::grpc::ServerContext* context, const ::activity::UpdateRequest* request, ::activity::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::RemoveActivity(::grpc::ServerContext* context, const ::activity::FindByIdRequest* request, ::activity::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::QueryActivity(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::activity::ActivityReply, ::activity::PaginationRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::FindAllActivityStream(::grpc::ServerContext* context, const ::activity::EmptyRequest* request, ::grpc::ServerWriter< ::activity::ActivitiesReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::UpdateActivityStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::activity::UpdateRequest>* reader, ::activity::QueryReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Activity::Service::CreateActivityBidiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::activity::QueryReply, ::activity::CreateRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace activity

