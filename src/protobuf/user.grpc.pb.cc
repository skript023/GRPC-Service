// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user.proto

#include "user.pb.h"
#include "user.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace user {

static const char* User_method_names[] = {
  "/user.User/FindAllUser",
  "/user.User/FindAllUserServerStream",
  "/user.User/FindOneUser",
  "/user.User/FindOneUserBidistream",
  "/user.User/CreateUser",
  "/user.User/UpdateUser",
  "/user.User/RemoveUser",
  "/user.User/QueryUser",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FindAllUser_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindAllUserServerStream_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FindOneUser_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindOneUserBidistream_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_CreateUser_(User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(User_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveUser_(User_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryUser_(User_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status User::Stub::FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::user::UsersReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::EmptyRequest, ::user::UsersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindAllUser_, context, request, response);
}

void User::Stub::async::FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::EmptyRequest, ::user::UsersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAllUser_, context, request, response, std::move(f));
}

void User::Stub::async::FindAllUser(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAllUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::UsersReply>* User::Stub::PrepareAsyncFindAllUserRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::UsersReply, ::user::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindAllUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::UsersReply>* User::Stub::AsyncFindAllUserRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindAllUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::user::UsersReply>* User::Stub::FindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::user::UsersReply>::Create(channel_.get(), rpcmethod_FindAllUserServerStream_, context, request);
}

void User::Stub::async::FindAllUserServerStream(::grpc::ClientContext* context, const ::user::EmptyRequest* request, ::grpc::ClientReadReactor< ::user::UsersReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::user::UsersReply>::Create(stub_->channel_.get(), stub_->rpcmethod_FindAllUserServerStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::user::UsersReply>* User::Stub::AsyncFindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::user::UsersReply>::Create(channel_.get(), cq, rpcmethod_FindAllUserServerStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::user::UsersReply>* User::Stub::PrepareAsyncFindAllUserServerStreamRaw(::grpc::ClientContext* context, const ::user::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::user::UsersReply>::Create(channel_.get(), cq, rpcmethod_FindAllUserServerStream_, context, request, false, nullptr);
}

::grpc::Status User::Stub::FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::user::UserReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::FindByIdRequest, ::user::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindOneUser_, context, request, response);
}

void User::Stub::async::FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::FindByIdRequest, ::user::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOneUser_, context, request, response, std::move(f));
}

void User::Stub::async::FindOneUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindOneUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::UserReply>* User::Stub::PrepareAsyncFindOneUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::UserReply, ::user::FindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindOneUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::UserReply>* User::Stub::AsyncFindOneUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindOneUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::user::FindByIdRequest, ::user::UserReply>* User::Stub::FindOneUserBidistreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::user::FindByIdRequest, ::user::UserReply>::Create(channel_.get(), rpcmethod_FindOneUserBidistream_, context);
}

void User::Stub::async::FindOneUserBidistream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::user::FindByIdRequest,::user::UserReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::user::FindByIdRequest,::user::UserReply>::Create(stub_->channel_.get(), stub_->rpcmethod_FindOneUserBidistream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>* User::Stub::AsyncFindOneUserBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::user::FindByIdRequest, ::user::UserReply>::Create(channel_.get(), cq, rpcmethod_FindOneUserBidistream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::user::FindByIdRequest, ::user::UserReply>* User::Stub::PrepareAsyncFindOneUserBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::user::FindByIdRequest, ::user::UserReply>::Create(channel_.get(), cq, rpcmethod_FindOneUserBidistream_, context, false, nullptr);
}

::grpc::Status User::Stub::CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::user::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::CreateRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void User::Stub::async::CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::CreateRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void User::Stub::async::CreateUser(::grpc::ClientContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::QueryReply>* User::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::QueryReply, ::user::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::QueryReply>* User::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::user::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::user::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::UpdateRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void User::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::UpdateRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void User::Stub::async::UpdateUser(::grpc::ClientContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::QueryReply>* User::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::QueryReply, ::user::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::QueryReply>* User::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::user::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::user::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::user::FindByIdRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveUser_, context, request, response);
}

void User::Stub::async::RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::user::FindByIdRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveUser_, context, request, response, std::move(f));
}

void User::Stub::async::RemoveUser(::grpc::ClientContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::user::QueryReply>* User::Stub::PrepareAsyncRemoveUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::user::QueryReply, ::user::FindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::user::QueryReply>* User::Stub::AsyncRemoveUserRaw(::grpc::ClientContext* context, const ::user::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::user::PaginationRequest, ::user::UserReply>* User::Stub::QueryUserRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::user::PaginationRequest, ::user::UserReply>::Create(channel_.get(), rpcmethod_QueryUser_, context);
}

void User::Stub::async::QueryUser(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::user::PaginationRequest,::user::UserReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::user::PaginationRequest,::user::UserReply>::Create(stub_->channel_.get(), stub_->rpcmethod_QueryUser_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>* User::Stub::AsyncQueryUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::user::PaginationRequest, ::user::UserReply>::Create(channel_.get(), cq, rpcmethod_QueryUser_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::user::PaginationRequest, ::user::UserReply>* User::Stub::PrepareAsyncQueryUserRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::user::PaginationRequest, ::user::UserReply>::Create(channel_.get(), cq, rpcmethod_QueryUser_, context, false, nullptr);
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::EmptyRequest, ::user::UsersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::EmptyRequest* req,
             ::user::UsersReply* resp) {
               return service->FindAllUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< User::Service, ::user::EmptyRequest, ::user::UsersReply>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::EmptyRequest* req,
             ::grpc::ServerWriter<::user::UsersReply>* writer) {
               return service->FindAllUserServerStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::FindByIdRequest, ::user::UserReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::FindByIdRequest* req,
             ::user::UserReply* resp) {
               return service->FindOneUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< User::Service, ::user::FindByIdRequest, ::user::UserReply>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::user::UserReply,
             ::user::FindByIdRequest>* stream) {
               return service->FindOneUserBidistream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::CreateRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::CreateRequest* req,
             ::user::QueryReply* resp) {
               return service->CreateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::UpdateRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::UpdateRequest* req,
             ::user::QueryReply* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::user::FindByIdRequest, ::user::QueryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::user::FindByIdRequest* req,
             ::user::QueryReply* resp) {
               return service->RemoveUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[7],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< User::Service, ::user::PaginationRequest, ::user::UserReply>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::user::UserReply,
             ::user::PaginationRequest>* stream) {
               return service->QueryUser(ctx, stream);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::FindAllUser(::grpc::ServerContext* context, const ::user::EmptyRequest* request, ::user::UsersReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::FindAllUserServerStream(::grpc::ServerContext* context, const ::user::EmptyRequest* request, ::grpc::ServerWriter< ::user::UsersReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::FindOneUser(::grpc::ServerContext* context, const ::user::FindByIdRequest* request, ::user::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::FindOneUserBidistream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::FindByIdRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::CreateUser(::grpc::ServerContext* context, const ::user::CreateRequest* request, ::user::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UpdateUser(::grpc::ServerContext* context, const ::user::UpdateRequest* request, ::user::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::RemoveUser(::grpc::ServerContext* context, const ::user::FindByIdRequest* request, ::user::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::QueryUser(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::user::UserReply, ::user::PaginationRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace user

