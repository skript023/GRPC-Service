// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: product.proto
#ifndef GRPC_product_2eproto__INCLUDED
#define GRPC_product_2eproto__INCLUDED

#include "product.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace product {

class Product final {
 public:
  static constexpr char const* service_full_name() {
    return "product.Product";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::product::ProductsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductsReply>> AsyncFindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductsReply>>(AsyncFindAllProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductsReply>> PrepareAsyncFindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductsReply>>(PrepareAsyncFindAllProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::product::ProductsReply>> FindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::product::ProductsReply>>(FindAllProductServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::product::ProductsReply>> AsyncFindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::product::ProductsReply>>(AsyncFindAllProductServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::product::ProductsReply>> PrepareAsyncFindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::product::ProductsReply>>(PrepareAsyncFindAllProductServerStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status FindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::product::ProductReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductReply>> AsyncFindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductReply>>(AsyncFindOneProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductReply>> PrepareAsyncFindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductReply>>(PrepareAsyncFindOneProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>> FindOneProductBidistream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>>(FindOneProductBidistreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>> AsyncFindOneProductBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>>(AsyncFindOneProductBidistreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>> PrepareAsyncFindOneProductBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>>(PrepareAsyncFindOneProductBidistreamRaw(context, cq));
    }
    virtual ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::product::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>> AsyncCreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::product::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>> AsyncUpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>>(AsyncUpdateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>> PrepareAsyncUpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>>(PrepareAsyncUpdateProductRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::product::QueryReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>> AsyncRemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>>(AsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>> PrepareAsyncRemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>>(PrepareAsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>> QueryProduct(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>>(QueryProductRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>> AsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>>(AsyncQueryProductRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>> PrepareAsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>>(PrepareAsyncQueryProductRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest* request, ::product::ProductsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest* request, ::product::ProductsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest* request, ::grpc::ClientReadReactor< ::product::ProductsReply>* reactor) = 0;
      virtual void FindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::ProductReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::ProductReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindOneProductBidistream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::product::FindByIdRequest,::product::ProductReply>* reactor) = 0;
      virtual void CreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest* request, ::product::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest* request, ::product::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest* request, ::product::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest* request, ::product::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::QueryReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryProduct(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::product::PaginationRequest,::product::ProductReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductsReply>* AsyncFindAllProductRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductsReply>* PrepareAsyncFindAllProductRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::product::ProductsReply>* FindAllProductServerStreamRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::product::ProductsReply>* AsyncFindAllProductServerStreamRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::product::ProductsReply>* PrepareAsyncFindAllProductServerStreamRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductReply>* AsyncFindOneProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::ProductReply>* PrepareAsyncFindOneProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>* FindOneProductBidistreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>* AsyncFindOneProductBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::product::FindByIdRequest, ::product::ProductReply>* PrepareAsyncFindOneProductBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>* AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>* PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>* AsyncRemoveProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::product::QueryReply>* PrepareAsyncRemoveProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>* QueryProductRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>* AsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::product::PaginationRequest, ::product::ProductReply>* PrepareAsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::product::ProductsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductsReply>> AsyncFindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductsReply>>(AsyncFindAllProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductsReply>> PrepareAsyncFindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductsReply>>(PrepareAsyncFindAllProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::product::ProductsReply>> FindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::product::ProductsReply>>(FindAllProductServerStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::product::ProductsReply>> AsyncFindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::product::ProductsReply>>(AsyncFindAllProductServerStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::product::ProductsReply>> PrepareAsyncFindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::product::ProductsReply>>(PrepareAsyncFindAllProductServerStreamRaw(context, request, cq));
    }
    ::grpc::Status FindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::product::ProductReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductReply>> AsyncFindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductReply>>(AsyncFindOneProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductReply>> PrepareAsyncFindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::ProductReply>>(PrepareAsyncFindOneProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>> FindOneProductBidistream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>>(FindOneProductBidistreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>> AsyncFindOneProductBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>>(AsyncFindOneProductBidistreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>> PrepareAsyncFindOneProductBidistream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>>(PrepareAsyncFindOneProductBidistreamRaw(context, cq));
    }
    ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::product::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>> AsyncCreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    ::grpc::Status UpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::product::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>> AsyncUpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>>(AsyncUpdateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>> PrepareAsyncUpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>>(PrepareAsyncUpdateProductRaw(context, request, cq));
    }
    ::grpc::Status RemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::product::QueryReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>> AsyncRemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>>(AsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>> PrepareAsyncRemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::product::QueryReply>>(PrepareAsyncRemoveProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::product::PaginationRequest, ::product::ProductReply>> QueryProduct(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::product::PaginationRequest, ::product::ProductReply>>(QueryProductRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::product::PaginationRequest, ::product::ProductReply>> AsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::product::PaginationRequest, ::product::ProductReply>>(AsyncQueryProductRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::product::PaginationRequest, ::product::ProductReply>> PrepareAsyncQueryProduct(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::product::PaginationRequest, ::product::ProductReply>>(PrepareAsyncQueryProductRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest* request, ::product::ProductsReply* response, std::function<void(::grpc::Status)>) override;
      void FindAllProduct(::grpc::ClientContext* context, const ::product::EmptyRequest* request, ::product::ProductsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindAllProductServerStream(::grpc::ClientContext* context, const ::product::EmptyRequest* request, ::grpc::ClientReadReactor< ::product::ProductsReply>* reactor) override;
      void FindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::ProductReply* response, std::function<void(::grpc::Status)>) override;
      void FindOneProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::ProductReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindOneProductBidistream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::product::FindByIdRequest,::product::ProductReply>* reactor) override;
      void CreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest* request, ::product::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void CreateProduct(::grpc::ClientContext* context, const ::product::CreateRequest* request, ::product::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest* request, ::product::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void UpdateProduct(::grpc::ClientContext* context, const ::product::UpdateRequest* request, ::product::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::QueryReply* response, std::function<void(::grpc::Status)>) override;
      void RemoveProduct(::grpc::ClientContext* context, const ::product::FindByIdRequest* request, ::product::QueryReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryProduct(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::product::PaginationRequest,::product::ProductReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::product::ProductsReply>* AsyncFindAllProductRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::ProductsReply>* PrepareAsyncFindAllProductRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::product::ProductsReply>* FindAllProductServerStreamRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request) override;
    ::grpc::ClientAsyncReader< ::product::ProductsReply>* AsyncFindAllProductServerStreamRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::product::ProductsReply>* PrepareAsyncFindAllProductServerStreamRaw(::grpc::ClientContext* context, const ::product::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::ProductReply>* AsyncFindOneProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::ProductReply>* PrepareAsyncFindOneProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>* FindOneProductBidistreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>* AsyncFindOneProductBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::product::FindByIdRequest, ::product::ProductReply>* PrepareAsyncFindOneProductBidistreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::QueryReply>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::QueryReply>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::product::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::QueryReply>* AsyncUpdateProductRaw(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::QueryReply>* PrepareAsyncUpdateProductRaw(::grpc::ClientContext* context, const ::product::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::QueryReply>* AsyncRemoveProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::product::QueryReply>* PrepareAsyncRemoveProductRaw(::grpc::ClientContext* context, const ::product::FindByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::product::PaginationRequest, ::product::ProductReply>* QueryProductRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::product::PaginationRequest, ::product::ProductReply>* AsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::product::PaginationRequest, ::product::ProductReply>* PrepareAsyncQueryProductRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_FindAllProductServerStream_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOneProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOneProductBidistream_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryProduct_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindAllProduct(::grpc::ServerContext* context, const ::product::EmptyRequest* request, ::product::ProductsReply* response);
    virtual ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* context, const ::product::EmptyRequest* request, ::grpc::ServerWriter< ::product::ProductsReply>* writer);
    virtual ::grpc::Status FindOneProduct(::grpc::ServerContext* context, const ::product::FindByIdRequest* request, ::product::ProductReply* response);
    virtual ::grpc::Status FindOneProductBidistream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* stream);
    virtual ::grpc::Status CreateProduct(::grpc::ServerContext* context, const ::product::CreateRequest* request, ::product::QueryReply* response);
    virtual ::grpc::Status UpdateProduct(::grpc::ServerContext* context, const ::product::UpdateRequest* request, ::product::QueryReply* response);
    virtual ::grpc::Status RemoveProduct(::grpc::ServerContext* context, const ::product::FindByIdRequest* request, ::product::QueryReply* response);
    virtual ::grpc::Status QueryProduct(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProduct(::grpc::ServerContext* context, ::product::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::product::ProductsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAllProductServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAllProductServerStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindAllProductServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::product::ProductsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProductServerStream(::grpc::ServerContext* context, ::product::EmptyRequest* request, ::grpc::ServerAsyncWriter< ::product::ProductsReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneProduct(::grpc::ServerContext* context, ::product::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::product::ProductReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOneProductBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOneProductBidistream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FindOneProductBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProductBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneProductBidistream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProduct() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::product::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::product::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProduct(::grpc::ServerContext* context, ::product::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::product::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveProduct(::grpc::ServerContext* context, ::product::FindByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::product::QueryReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryProduct() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryProduct(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAllProduct<WithAsyncMethod_FindAllProductServerStream<WithAsyncMethod_FindOneProduct<WithAsyncMethod_FindOneProductBidistream<WithAsyncMethod_CreateProduct<WithAsyncMethod_UpdateProduct<WithAsyncMethod_RemoveProduct<WithAsyncMethod_QueryProduct<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::product::EmptyRequest, ::product::ProductsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::product::EmptyRequest* request, ::product::ProductsReply* response) { return this->FindAllProduct(context, request, response); }));}
    void SetMessageAllocatorFor_FindAllProduct(
        ::grpc::MessageAllocator< ::product::EmptyRequest, ::product::ProductsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::product::EmptyRequest, ::product::ProductsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindAllProductServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAllProductServerStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::product::EmptyRequest, ::product::ProductsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::product::EmptyRequest* request) { return this->FindAllProductServerStream(context, request); }));
    }
    ~WithCallbackMethod_FindAllProductServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::product::ProductsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::product::ProductsReply>* FindAllProductServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::product::EmptyRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::product::FindByIdRequest, ::product::ProductReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::product::FindByIdRequest* request, ::product::ProductReply* response) { return this->FindOneProduct(context, request, response); }));}
    void SetMessageAllocatorFor_FindOneProduct(
        ::grpc::MessageAllocator< ::product::FindByIdRequest, ::product::ProductReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::product::FindByIdRequest, ::product::ProductReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindOneProductBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindOneProductBidistream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::product::FindByIdRequest, ::product::ProductReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FindOneProductBidistream(context); }));
    }
    ~WithCallbackMethod_FindOneProductBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProductBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::product::FindByIdRequest, ::product::ProductReply>* FindOneProductBidistream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::product::CreateRequest, ::product::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::product::CreateRequest* request, ::product::QueryReply* response) { return this->CreateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_CreateProduct(
        ::grpc::MessageAllocator< ::product::CreateRequest, ::product::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::product::CreateRequest, ::product::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::product::UpdateRequest, ::product::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::product::UpdateRequest* request, ::product::QueryReply* response) { return this->UpdateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateProduct(
        ::grpc::MessageAllocator< ::product::UpdateRequest, ::product::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::product::UpdateRequest, ::product::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::product::FindByIdRequest, ::product::QueryReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::product::FindByIdRequest* request, ::product::QueryReply* response) { return this->RemoveProduct(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveProduct(
        ::grpc::MessageAllocator< ::product::FindByIdRequest, ::product::QueryReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::product::FindByIdRequest, ::product::QueryReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryProduct() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::product::PaginationRequest, ::product::ProductReply>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryProduct(context); }));
    }
    ~WithCallbackMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::product::PaginationRequest, ::product::ProductReply>* QueryProduct(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_FindAllProduct<WithCallbackMethod_FindAllProductServerStream<WithCallbackMethod_FindOneProduct<WithCallbackMethod_FindOneProductBidistream<WithCallbackMethod_CreateProduct<WithCallbackMethod_UpdateProduct<WithCallbackMethod_RemoveProduct<WithCallbackMethod_QueryProduct<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindAllProductServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAllProductServerStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindAllProductServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::product::ProductsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOneProductBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOneProductBidistream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FindOneProductBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProductBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProduct() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryProduct() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAllProductServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAllProductServerStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindAllProductServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::product::ProductsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAllProductServerStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOneProductBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOneProductBidistream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FindOneProductBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProductBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOneProductBidistream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryProduct() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryProduct(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(7, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAllProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAllProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAllProductServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAllProductServerStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FindAllProductServerStream(context, request); }));
    }
    ~WithRawCallbackMethod_FindAllProductServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::product::ProductsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindAllProductServerStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindOneProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindOneProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindOneProductBidistream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindOneProductBidistream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->FindOneProductBidistream(context); }));
    }
    ~WithRawCallbackMethod_FindOneProductBidistream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOneProductBidistream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::FindByIdRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FindOneProductBidistream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryProduct() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->QueryProduct(context); }));
    }
    ~WithRawCallbackMethod_QueryProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProduct(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::product::ProductReply, ::product::PaginationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* QueryProduct(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAllProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAllProduct() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::product::EmptyRequest, ::product::ProductsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::product::EmptyRequest, ::product::ProductsReply>* streamer) {
                       return this->StreamedFindAllProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAllProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllProduct(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::product::ProductsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAllProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::product::EmptyRequest,::product::ProductsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindOneProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindOneProduct() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::product::FindByIdRequest, ::product::ProductReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::product::FindByIdRequest, ::product::ProductReply>* streamer) {
                       return this->StreamedFindOneProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindOneProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindOneProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::ProductReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindOneProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::product::FindByIdRequest,::product::ProductReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateProduct() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::product::CreateRequest, ::product::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::product::CreateRequest, ::product::QueryReply>* streamer) {
                       return this->StreamedCreateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::product::CreateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::product::CreateRequest,::product::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateProduct() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::product::UpdateRequest, ::product::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::product::UpdateRequest, ::product::QueryReply>* streamer) {
                       return this->StreamedUpdateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProduct(::grpc::ServerContext* /*context*/, const ::product::UpdateRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::product::UpdateRequest,::product::QueryReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveProduct() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::product::FindByIdRequest, ::product::QueryReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::product::FindByIdRequest, ::product::QueryReply>* streamer) {
                       return this->StreamedRemoveProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveProduct(::grpc::ServerContext* /*context*/, const ::product::FindByIdRequest* /*request*/, ::product::QueryReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::product::FindByIdRequest,::product::QueryReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAllProduct<WithStreamedUnaryMethod_FindOneProduct<WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_UpdateProduct<WithStreamedUnaryMethod_RemoveProduct<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FindAllProductServerStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindAllProductServerStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::product::EmptyRequest, ::product::ProductsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::product::EmptyRequest, ::product::ProductsReply>* streamer) {
                       return this->StreamedFindAllProductServerStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindAllProductServerStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAllProductServerStream(::grpc::ServerContext* /*context*/, const ::product::EmptyRequest* /*request*/, ::grpc::ServerWriter< ::product::ProductsReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindAllProductServerStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::product::EmptyRequest,::product::ProductsReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FindAllProductServerStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAllProduct<WithSplitStreamingMethod_FindAllProductServerStream<WithStreamedUnaryMethod_FindOneProduct<WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_UpdateProduct<WithStreamedUnaryMethod_RemoveProduct<Service > > > > > > StreamedService;
};

}  // namespace product


#endif  // GRPC_product_2eproto__INCLUDED
